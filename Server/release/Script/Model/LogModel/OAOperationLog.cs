//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由Codesmith工具生成。
// 此文件的更改可能会导致不正确的行为，如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using ProtoBuf;
using ZyGames.Framework.Common;
using ZyGames.Framework.Collection;
using ZyGames.Framework.Model;


namespace ZyGames.Doudizhu.Model
{
    /// <summary>
    /// 
    /// </summary>
    /// <![CDATA[
    /// @periodTime:设置生存周期(秒)
    /// @personalName: 映射UserId对应的字段名,默认为"UserId"
    /// ]]>
    /// </remarks>
    [Serializable, ProtoContract]
	[EntityTable(AccessLevel.WriteOnly, DbConfig.Log, "OAOperationLog")]
    public class OAOperationLog : LogEntity
    {
        #region auto-generated static method
        static OAOperationLog()
        {
            EntitySchemaSet.InitSchema(typeof(OAOperationLog));
        }
        #endregion
        /// <summary>
        /// </summary>
        public OAOperationLog()
        {
            
        }        
        /// <summary>
        /// </summary>
        public OAOperationLog(string iD)
            : this()
        {
            _iD = iD;
        }

        #region 自动生成属性
        private string _iD;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(1)]
        [EntityField("ID", IsKey = true)]
        public string ID
        {
            get
            {
                return _iD;
            } 
            
        }
        private string _userID;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(2)]
        [EntityField("UserID")]
        public string UserID
        {
            
            set
            {
                SetChange("UserID", value);
            }
        }
        private short _opType;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(3)]
        [EntityField("OpType")]
        public short OpType
        {
            
            set
            {
                SetChange("OpType", value);
            }
        }
        private string _reason;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(4)]
        [EntityField("Reason")]
        public string Reason
        {
            
            set
            {
                SetChange("Reason", value);
            }
        }
        private DateTime _endDate;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(5)]
        [EntityField("EndDate")]
        public DateTime EndDate
        {
            
            set
            {
                SetChange("EndDate", value);
            }
        }
        private int _opUserID;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(6)]
        [EntityField("OpUserID")]
        public int OpUserID
        {
            
            set
            {
                SetChange("OpUserID", value);
            }
        }
        private DateTime _createDate;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(7)]
        [EntityField("CreateDate")]
        public DateTime CreateDate
        {
            
            set
            {
                SetChange("CreateDate", value);
            }
        }
    
        protected override object this[string index]
		{
			get
			{
                #region
				switch (index)
				{
                    case "ID": return _iD;
                    case "UserID": return _userID;
                    case "OpType": return _opType;
                    case "Reason": return _reason;
                    case "EndDate": return _endDate;
                    case "OpUserID": return _opUserID;
                    case "CreateDate": return _createDate;
					default: throw new ArgumentException(string.Format("OAOperationLog index[{0}] isn't exist.", index));
				}
                #endregion
			}
			set
			{
                #region
				switch (index)
				{
                    case "ID": 
                        _iD = value.ToNotNullString();
                        break; 
                    case "UserID": 
                        _userID = value.ToNotNullString();
                        break; 
                    case "OpType": 
                        _opType = value.ToShort();
                        break; 
                    case "Reason": 
                        _reason = value.ToNotNullString();
                        break; 
                    case "EndDate": 
                        _endDate = value.ToDateTime();
                        break; 
                    case "OpUserID": 
                        _opUserID = value.ToInt();
                        break; 
                    case "CreateDate": 
                        _createDate = value.ToDateTime();
                        break; 
					default: throw new ArgumentException(string.Format("OAOperationLog index[{0}] isn't exist.", index));
				}
                #endregion
			}
		}
        
        #endregion
        

	}
}
//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由Codesmith工具生成。
// 此文件的更改可能会导致不正确的行为，如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using ProtoBuf;
using ZyGames.Framework.Common;
using ZyGames.Framework.Collection;
using ZyGames.Framework.Model;


namespace ZyGames.Doudizhu.Model
{
    /// <summary>
    /// 
    /// </summary>
    /// <![CDATA[
    /// @periodTime:设置生存周期(秒)
    /// @personalName: 映射UserId对应的字段名,默认为"UserId"
    /// ]]>
    /// </remarks>
    [Serializable, ProtoContract]
	[EntityTable(AccessLevel.WriteOnly, DbConfig.Log, "ChatLog")]
    public class ChatLog : LogEntity
    {
        #region auto-generated static method
        static ChatLog()
        {
            EntitySchemaSet.InitSchema(typeof(ChatLog));
        }
        #endregion
        /// <summary>
        /// </summary>
        public ChatLog()
        {
            
        }        
        /// <summary>
        /// </summary>
        public ChatLog(int chatID)
            : this()
        {
            _chatID = chatID;
        }

        #region 自动生成属性
        private int _chatID;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(1)]
        [EntityField("ChatID", IsKey = true, IsIdentity = true)]
        public int ChatID
        {
            get
            {
                return _chatID;
            } 
        }
        private ChatType _chatType;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(2)]
        [EntityField("ChatType")]
        public ChatType ChatType
        {
            set
            {
                SetChange("ChatType", value);
            }
        }
        private int _fromUserID;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(3)]
        [EntityField("FromUserID")]
        public int FromUserID
        {
            set
            {
                SetChange("FromUserID", value);
            }
        }
        private string _fromUserName;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(4)]
        [EntityField("FromUserName")]
        public string FromUserName
        {
            set
            {
                SetChange("FromUserName", value);
            }
        }
        private int _toUserID;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(5)]
        [EntityField("ToUserID")]
        public int ToUserID
        {
            set
            {
                SetChange("ToUserID", value);
            }
        }
        private string _toUserName;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(6)]
        [EntityField("ToUserName")]
        public string ToUserName
        {
            set
            {
                SetChange("ToUserName", value);
            }
        }
        private string _content;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(7)]
        [EntityField("Content")]
        public string Content
        {
            set
            {
                SetChange("Content", value);
            }
        }
        private DateTime _sendDate;
        /// <summary>
        /// 
        /// </summary>        
        [ProtoMember(8)]
        [EntityField("SendDate")]
        public DateTime SendDate
        {
            set
            {
                SetChange("SendDate", value);
            }
        }
    
        protected override object this[string index]
		{
			get
			{
                #region
				switch (index)
				{
                    case "ChatID": return _chatID;
                    case "ChatType": return _chatType;
                    case "FromUserID": return _fromUserID;
                    case "FromUserName": return _fromUserName;
                    case "ToUserID": return _toUserID;
                    case "ToUserName": return _toUserName;
                    case "Content": return _content;
                    case "SendDate": return _sendDate;
					default: throw new ArgumentException(string.Format("ChatLog index[{0}] isn't exist.", index));
				}
                #endregion
			}
			set
			{
                #region
				switch (index)
				{
                    case "ChatID": 
                        _chatID = value.ToInt();
                        break; 
                    case "ChatType":
				        _chatType = value.ToEnum<ChatType>();
                        break; 
                    case "FromUserID": 
                        _fromUserID = value.ToInt();
                        break; 
                    case "FromUserName": 
                        _fromUserName = value.ToNotNullString();
                        break; 
                    case "ToUserID": 
                        _toUserID = value.ToInt();
                        break; 
                    case "ToUserName": 
                        _toUserName = value.ToNotNullString();
                        break; 
                    case "Content": 
                        _content = value.ToNotNullString();
                        break; 
                    case "SendDate": 
                        _sendDate = value.ToDateTime();
                        break; 
					default: throw new ArgumentException(string.Format("ChatLog index[{0}] isn't exist.", index));
				}
                #endregion
			}
		}
        
        #endregion
        

	}
}